import hashlib
import requests
import time
import os
import argparse
from typing import List
from rich import print
from rich.console import Console

# === CONFIGURATION ===
# The model can be specified via command-line argument.
# See a list of models at https://openrouter.ai/models
DEFAULT_MODEL = "x-ai/grok-3-beta"
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
THINK_DEPTH = 888888

console = Console()

# === TRADITIONAL CHINESE WORD LIST ===
words = [
    'ÁöÑ', 'Êàë', '‰Ω†', 'ÊòØ', '‰∫Ü', '‰∏ç', '‰ªñ', 'ÊàëÂÄë', 'Âú®', 'Êúâ', 'Â•π', 'ÂÄë', 'ÈÄô', 'ÈÇ£', 'ÂÄã', '‰∫∫', 'ÂÆ∂', 'Â≠∏Ê†°',
    'ÊúãÂèã', '‰∏≠Âúã', 'Âè∞ÁÅ£', 'Ê∞¥', 'Ëå∂', 'È£üÁâ©', '‰æÜ', 'Âéª', 'Ë™™', 'Áúã', 'ÂêÉ', 'Âñù', 'ÂÅö', 'ÊÉ≥', 'Ë¶Å', 'ÊúÉ', 'ÂñúÊ≠°',
    'Â•Ω', 'Â§ß', 'Â∞è', 'Â§ö', 'Â∞ë', 'Âæà', 'ÈÉΩ', 'Âóé', '‰ªÄÈ∫º', 'Ë™∞', 'Âì™Ë£°', 'Âì™ÂÖí', 'ÁÇ∫‰ªÄÈ∫º', 'Â§öÂ∞ë', 'Áî∑‰∫∫', 'Â•≥‰∫∫',
    'Â≠©Â≠ê', 'Áà∏Áà∏', 'Â™ΩÂ™Ω', 'Â≠∏Áîü', 'ËÄÅÂ∏´', 'ÈÄôË£°', 'ÈÇ£Ë£°', '‰∏äÈù¢', '‰∏ãÈù¢', 'Ë£°Èù¢', 'Â§ñÈù¢', 'ÂâçÈù¢', 'ÂæåÈù¢', 'ÂïÜÂ∫ó',
    'È¶ôÊ∏Ø', '‰ªäÂ§©', 'ÊòéÂ§©', 'Êò®Â§©', 'ÁèæÂú®', 'Êó©‰∏ä', '‰∏ãÂçà', 'Êôö‰∏ä', 'Âπ¥', 'Êúà', 'Êó•', 'ÊôÇÈñì', 'È£Ø', 'Ëèú', 'Ê∞¥Êûú',
    'ËÇâ', 'Êù±Ë•ø', 'Èå¢', 'Êõ∏', 'ÈõªËÖ¶', 'ÊâãÊ©ü', 'Ê°åÂ≠ê', 'Ê§ÖÂ≠ê', 'Ëªä', 'Ë≤∑', 'Ë≥£', 'ÂØ´', 'ËÆÄ', 'Ëµ∞', 'Ë∑ë', 'Âùê', 'Á´ô',
    'Èñã', 'Èóú', 'Áµ¶', 'Êãø', 'Êâæ', 'Á≠â', 'Âïè', 'ÂõûÁ≠î', 'ÊÑõ', 'Áü•ÈÅì', 'Ë¶∫Âæó', 'Â∏åÊúõ', '‰∏çÂ•Ω', 'È´ò', 'ÁüÆ', 'Èï∑', 'Áü≠',
    'Êñ∞', 'Ëàä', 'ËÄÅ', 'ÊºÇ‰∫Æ', 'Â∏•', 'ÂèØÊÑõ', 'Â•ΩÂêÉ', 'Èõ£ÂêÉ', 'È´òËàà', 'Èõ£ÈÅé', 'Á¥Ø', 'Âøô', 'Âø´', 'ÊÖ¢', 'Ë≤¥', '‰æøÂÆú',
    'Â§™', '‰πü', 'Ê≤í', 'Â∏∏Â∏∏', 'ÊúÄ', 'Â∞±', 'Êâç', 'Êú¨', 'Âºµ', 'ÊùØ', 'Áì∂', 'Á¢ó', '‰ª∂', 'Ê¢ù', 'Ëºõ', 'Èöª', 'Âë¢', 'Âêß',
    'ÈÅé', 'Âíå', 'Ë∑ü', '‰ΩÜÊòØ', 'Âõ†ÁÇ∫', 'ÊâÄ‰ª•', 'Â¶ÇÊûú', 'ÈÇÑÊòØ', 'ÊàñËÄÖ', 'ÂñÇ', 'Âïä', 'ÂìéÂëÄ', 'Âì¶'
]
DECK_SIZE = len(words)

# === HASH FUNCTION ===
def hash_question(question: str, salt: str = "", times: int = THINK_DEPTH) -> int:
    h = (question + salt).encode()
    for _ in range(times):
        h = hashlib.sha512(h).digest()
    return int.from_bytes(h, 'big')

# === DRAWING WORDS ===
def draw_words(question: str, count: int) -> List[str]:
    drawn = []
    used_indices = set()
    timestamp = int(time.time())  # Add a bit of time-based randomness

    for i in range(count):
        salt = f"{question}-word{i}-time{timestamp}"
        while True:
            index = hash_question(question, salt) % DECK_SIZE
            if index not in used_indices:
                used_indices.add(index)
                drawn.append(words[index])
                break
    return drawn

# === INTERPRETATION REQUEST ===
def interpret_reading(question: str, word_list: List[str], model: str) -> str:
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        return (
            "[red]‚ùå OPENROUTER_API_KEY environment variable not set.[/red]\n"
            "[yellow]üí° Tip: Get a key from https://openrouter.ai and set it.[/yellow]\n"
            "   Linux/macOS: export OPENROUTER_API_KEY='your-key-here'\n"
            "   Windows: setx OPENROUTER_API_KEY your-key-here"
        )

    word_text = ", ".join(word_list)

    system_prompt = (
        "You are a wise sage. Interpret the drawn Traditional Chinese words in a poetic and insightful way, "
        "connecting them to the user's question. Provide a simple, clear, and helpful message."
    )
    user_prompt = (
        f"The question is: '{question}'\n\n"
        f"The following Traditional Chinese word(s) were drawn:\n{word_text}"
    )

    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
    }
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/reden/tcp",
        "X-Title": "Chinese Oracle",
    }


    console.print("\n[bold blue]Consulting the digital ether...[/bold blue]")

    try:
        console.print("\n[bold blue]Sending request to OpenRouter...[/bold blue]")
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=300)
        console.print("[bold blue]Received response from OpenRouter.[/bold blue]")
        response.raise_for_status()
        result = response.json()
        return result.get("choices", [{}])[0].get("message", {}).get("content", "No response from LLM.")
    except requests.exceptions.HTTPError as e:
        return f"[red]An HTTP error occurred with the OpenRouter API:[/red] {e.response.text}"
    except requests.exceptions.ConnectionError:
        return "[red]‚ùå Unable to connect to OpenRouter. Check your internet connection.[/red]"
    except Exception as e:
        return f"[red]An unexpected error occurred:[/red] {e}"

# === MAIN LOGIC ===
def main():
    parser = argparse.ArgumentParser(
        description="Get a Traditional Chinese reading using an LLM via OpenRouter.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "--model",
        type=str,
        default=DEFAULT_MODEL,
        help=f"The model to use from OpenRouter.\nExample: 'mistralai/mistral-7b-instruct'\nDefault: '{DEFAULT_MODEL}'"
    )
    args = parser.parse_args()
    model_name = args.model

    console.print("[bold cyan]Traditional Chinese Oracle[/bold cyan] (via OpenRouter)")
    console.print(f"[dim]Using model: {model_name}[/dim]")
    question = console.input("[bold yellow]Ask your question[/bold yellow]: ")

    try:
        word_count = int(console.input("How many words to draw? (1-10): ").strip())
        if not 1 <= word_count <= 10:
            word_count = 3
    except ValueError:
        word_count = 3

    drawn_words = draw_words(question, word_count)

    console.print(f"\n[bold magenta]Your Word{'s' if word_count > 1 else ''}:[/bold magenta]")
    for i, word in enumerate(drawn_words):
        console.print(f"[bold]{i+1}. {word}[/bold]")

    interpretation = interpret_reading(question, drawn_words, model_name)
    console.print(f"\n[italic green]{interpretation}[/italic green]\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        console.print("\n[bold red]‚èπÔ∏è Reading canceled.[/bold red]")
